<mxfile host="app.diagrams.net" modified="2022-08-08T14:20:50.104Z" agent="5.0 (Windows)" etag="KCnd3I9xejB36QpPYQtv" version="20.2.2" type="github">
  <diagram id="cen_i1RHmq_5vS7J9Gh5" name="Page-1">
    <mxGraphModel dx="4148" dy="1929" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="9ayToyOtu8oUKvdpPZHS-1" value="&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 14px;&quot;&gt;Suggested changes (write down your name for better discussion)&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;Shackman (not an expert!): There should only be one class responsible for creating instances of ItemStack in the entire game. That makes it much easier to keep track of, as well as implement object pooling. Right now Itemstacks are being created and destroyed, while they could simply be reused to create less garbage (less garbage collection = better performance)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Adding an ItemStack to the inventory of a type that wasn’t in there, makes the Slot only hold a reference to the ItemStack, not creating a new instance.&lt;br&gt;So someone might go ahead and pick an ItemStack from a berry bush and then wonder why the berries on the bush are now synchronized to the inventory system.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;aspect=fixed;fillColor=#e1d5e7;strokeColor=#9673a6;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-1630" y="-100" width="300" height="300" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontSize=14;" edge="1" parent="1" source="NL6LZe0rqqw29WmjIXu0-2" target="NL6LZe0rqqw29WmjIXu0-11">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-2" value="&lt;div&gt;public class ItemBase : ScriptableObject&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;margin-bottom: 0in; line-height: 100%&quot; align=&quot;left&quot;&gt;&lt;br/&gt;&lt;font face=&quot;Liberation Sans, sans-serif&quot;&gt;&lt;font style=&quot;font-size: 12pt&quot; size=&quot;3&quot;&gt;&lt;span style=&quot;text-decoration: none&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Defines&lt;br/&gt;characteristics like the name, color etc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-1405" y="-520" width="260" height="140" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-5" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontSize=14;" edge="1" parent="1" source="NL6LZe0rqqw29WmjIXu0-3">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-840" y="-320" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-3" value="&lt;div&gt;public abstract class Slot : MonoBehaviour&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;ItemStack _itemInSlot;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;// Can take in an item and represent it in the game world&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-840" y="-540" width="370" height="110" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-6" value="&lt;div&gt;public class ContainerSlot : Slot&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Adds UI functionality to Slot&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-890" y="-320" width="270" height="80" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-8" value="&lt;div&gt;public class InventoryManager : StaticMonoBehaviour&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;public ItemContainer mainInventory;&lt;br&gt;public ItemContainer ChestInventory;&lt;br&gt;public ItemContainerHotbar hotbar;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p style=&quot;margin-bottom: 0in; font-style: normal; font-weight: normal; line-height: 100%; text-decoration: none&quot; align=&quot;left&quot;&gt;&lt;br&gt;&lt;font face=&quot;Liberation Sans, sans-serif&quot;&gt;&lt;font style=&quot;font-size: 12pt&quot; size=&quot;3&quot;&gt;When adding an instance of ‘ItemStack’ via the InventoryManager, it&lt;br&gt;checks if there already is an ItemStack representing the same kind of&lt;br&gt;item (both referencing the same instance of ‘ItemBase’), and in&lt;br&gt;that case only the amount is added.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-1240" y="60" width="530" height="190" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-11" value="public class ItemStack&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;ItemBase type;&lt;/div&gt;&lt;div&gt;int amount;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-1405" y="-310" width="315" height="105" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-13" value="&lt;div&gt;public class ItemContainer : MonoBehaviour&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;public List&amp;lt;ContainerSlot&amp;gt; slots; // list for each slot in inventory or hotbar&lt;br&gt;public List&amp;lt;ItemStack&amp;gt; itemStacks;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=14;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-925" y="-220" width="540" height="100" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-14" value="public class ItemContainerHotbar : ItemContainer" style="rounded=0;whiteSpace=wrap;html=1;fontFamily=Helvetica;fontSize=14;fontColor=default;strokeColor=default;fillColor=default;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-925" y="-100" width="365" height="51" as="geometry" />
        </mxCell>
        <mxCell id="NL6LZe0rqqw29WmjIXu0-16" value="&lt;b&gt;Summary&lt;/b&gt;&lt;br&gt;&lt;br&gt;Items in the game are instances of the class ‘ItemStack’, which is not a monobehaviour and can be created at runtime. Each instance of ‘ItemStack’ defines the amount and what kind of item it is. The latter one is defined by having a reference to an instance of the scriptable object class ‘ItemBase’. This class defines characteristics like the name, color etc. &lt;br&gt;&lt;br&gt;An instance of ‘ItemStack’ can be created anywhere on the fly, you only need a reference to an instance of the scriptable object ‘ItemBase’ (a file in the projects folder) to pass it into the constructor. &lt;br&gt;&lt;br&gt;&lt;div&gt;The instance of ‘ItemStack’ is stored in a ‘Slot’ (Monobehaviour). ItemContainer holds a list of ‘Slot’. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Container slot inherits from Slot and adds UI functionailty. Similarly ItemContainerHotbar inherits from ItemContainer and adds UI functionality.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Inventory&lt;/b&gt;&lt;br&gt;&lt;br&gt;The inventory basically consist of two instances of ‘ItemContainer’, one is the hotbar (inherits from ‘ItemContainer’) and the other one the inventory.&lt;br&gt;Those are controlled by the static class ‘InventoryManager’. When adding an ItemStack to the inventory, it gets placed in the hotbar if there is free space, otherwise it goes inside the inventory.&lt;br&gt;&lt;br&gt;When adding an instance of ‘ItemStack’ via the InventoryManager, it checks if there already is an ItemStack representing the same kind of item (both referencing the same instance of ‘ItemBase’), and in that case only the amount is added." style="rounded=0;whiteSpace=wrap;html=1;fontFamily=Helvetica;fontSize=16;strokeColor=#6c8ebf;fillColor=#dae8fc;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-2430" y="-680" width="950" height="535" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
